{
  "React Form with Validation": {
    "prefix": "artisan-form",
    "description": "Complete form component with react-hook-form and zod validation",
    "body": [
      "'use client';",
      "",
      "import { useState } from 'react';",
      "import { useRouter } from 'next/navigation';",
      "import { useForm } from 'react-hook-form';",
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';",
      "import { Button } from '@/components/ui/button';",
      "import { Input } from '@/components/ui/input';",
      "import { Label } from '@/components/ui/label';",
      "import { Alert, AlertDescription } from '@/components/ui/alert';",
      "import { ArrowLeft, Save, Loader2, AlertCircle } from 'lucide-react';",
      "import { ${1:schema}, type ${2:FormData} } from '@/lib/validations';",
      "import { useToast } from '@/hooks/use-toast';",
      "import { useFormHotkeys } from '@/hooks/use-hotkeys';",
      "",
      "export default function ${3:ComponentName}() {",
      "  const router = useRouter();",
      "  const { toast } = useToast();",
      "  const [isSubmitting, setIsSubmitting] = useState(false);",
      "",
      "  const {",
      "    register,",
      "    handleSubmit,",
      "    formState: { errors },",
      "    reset,",
      "  } = useForm<${2:FormData}>({",
      "    resolver: zodResolver(${1:schema}),",
      "    defaultValues: {",
      "      ${4:// Add default values}",
      "    },",
      "  });",
      "",
      "  const onSubmit = async (data: ${2:FormData}) => {",
      "    setIsSubmitting(true);",
      "    try {",
      "      // TODO: Implement API call",
      "      console.log('Submitting:', data);",
      "      await new Promise(resolve => setTimeout(resolve, 1000));",
      "",
      "      toast({",
      "        title: \"Success!\",",
      "        description: \"${5:Item} has been created successfully.\",",
      "      });",
      "",
      "      router.push('${6:/items}');",
      "    } catch (error) {",
      "      console.error('Error:', error);",
      "      toast({",
      "        title: \"Error\",",
      "        description: \"Failed to create ${5:item}. Please try again.\",",
      "        variant: \"destructive\",",
      "      });",
      "    } finally {",
      "      setIsSubmitting(false);",
      "    }",
      "  };",
      "",
      "  // Add form hotkeys",
      "  useFormHotkeys(",
      "    () => handleSubmit(onSubmit)(),",
      "    () => reset()",
      "  );",
      "",
      "  return (",
      "    <div className=\"space-y-6\">",
      "      <div className=\"flex items-center gap-4\">",
      "        <Button",
      "          variant=\"ghost\"",
      "          size=\"sm\"",
      "          onClick={() => router.back()}",
      "          className=\"gap-2\"",
      "        >",
      "          <ArrowLeft className=\"w-4 h-4\" />",
      "          Back",
      "        </Button>",
      "        <h1 className=\"text-2xl font-bold\">${7:Create New Item}</h1>",
      "      </div>",
      "",
      "      <Card>",
      "        <CardHeader>",
      "          <CardTitle>${7:Create New Item}</CardTitle>",
      "          <CardDescription>",
      "            ${8:Add a new item to your inventory}",
      "          </CardDescription>",
      "        </CardHeader>",
      "        <CardContent>",
      "          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">",
      "            ${0:/* Add form fields here */}",
      "",
      "            <div className=\"flex justify-end gap-2\">",
      "              <Button",
      "                type=\"button\"",
      "                variant=\"outline\"",
      "                onClick={() => router.back()}",
      "                disabled={isSubmitting}",
      "              >",
      "                Cancel",
      "              </Button>",
      "              <Button type=\"submit\" disabled={isSubmitting} className=\"gap-2\">",
      "                {isSubmitting ? (",
      "                  <Loader2 className=\"w-4 h-4 animate-spin\" />",
      "                ) : (",
      "                  <Save className=\"w-4 h-4\" />",
      "                )}",
      "                Save",
      "              </Button>",
      "            </div>",
      "          </form>",
      "        </CardContent>",
      "      </Card>",
      "    </div>",
      "  );",
      "}"
    ]
  },
  "Form Field with Validation": {
    "prefix": "artisan-field",
    "description": "Form field with label, input, and error handling",
    "body": [
      "<div className=\"space-y-2\">",
      "  <Label htmlFor=\"${1:fieldName}\">${2:Field Label} ${3:*}</Label>",
      "  <Input",
      "    id=\"${1:fieldName}\"",
      "    {...register('${1:fieldName}')}",
      "    placeholder=\"${4:Enter value...}\"",
      "    disabled={isSubmitting}",
      "    aria-invalid={!!errors.${1:fieldName}}",
      "  />",
      "  {errors.${1:fieldName} && (",
      "    <Alert variant=\"destructive\" className=\"py-2\">",
      "      <AlertCircle className=\"h-4 w-4\" />",
      "      <AlertDescription>{errors.${1:fieldName}.message}</AlertDescription>",
      "    </Alert>",
      "  )}",
      "</div>"
    ]
  },
  "List Page with Search": {
    "prefix": "artisan-list",
    "description": "List page component with search and filters",
    "body": [
      "'use client';",
      "",
      "import { useState, useMemo } from 'react';",
      "import { useRouter } from 'next/navigation';",
      "import { useDebounce } from 'use-debounce';",
      "import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';",
      "import { Button } from '@/components/ui/button';",
      "import { Input } from '@/components/ui/input';",
      "import { Badge } from '@/components/ui/badge';",
      "import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';",
      "import { Search, Plus, Edit, Eye } from 'lucide-react';",
      "import { ${1:sampleData} } from '@/lib/sample-data';",
      "",
      "export default function ${2:ComponentName}() {",
      "  const router = useRouter();",
      "  const [searchTerm, setSearchTerm] = useState('');",
      "  const [debouncedSearchTerm] = useDebounce(searchTerm, 300);",
      "",
      "  const filteredData = useMemo(() => {",
      "    if (!debouncedSearchTerm) return ${1:sampleData};",
      "    return ${1:sampleData}.filter(item =>",
      "      item.name.toLowerCase().includes(debouncedSearchTerm.toLowerCase())",
      "    );",
      "  }, [debouncedSearchTerm]);",
      "",
      "  return (",
      "    <div className=\"space-y-6\">",
      "      <div className=\"flex items-center justify-between\">",
      "        <h1 className=\"text-3xl font-bold\">${3:Items}</h1>",
      "        <Button onClick={() => router.push('${4:/items/new}')} className=\"gap-2\">",
      "          <Plus className=\"w-4 h-4\" />",
      "          Add ${5:Item}",
      "        </Button>",
      "      </div>",
      "",
      "      <Card>",
      "        <CardHeader>",
      "          <CardTitle>${3:Items}</CardTitle>",
      "          <CardDescription>",
      "            ${6:Manage your inventory items}",
      "          </CardDescription>",
      "        </CardHeader>",
      "        <CardContent>",
      "          <div className=\"space-y-4\">",
      "            <div className=\"relative\">",
      "              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />",
      "              <Input",
      "                placeholder=\"Search ${7:items}...\"",
      "                value={searchTerm}",
      "                onChange={(e) => setSearchTerm(e.target.value)}",
      "                className=\"pl-9\"",
      "              />",
      "            </div>",
      "",
      "            <Table>",
      "              <TableHeader>",
      "                <TableRow>",
      "                  <TableHead>${8:Name}</TableHead>",
      "                  <TableHead>${9:Type}</TableHead>",
      "                  <TableHead>${10:Status}</TableHead>",
      "                  <TableHead>Actions</TableHead>",
      "                </TableRow>",
      "              </TableHeader>",
      "              <TableBody>",
      "                {filteredData.map((item) => (",
      "                  <TableRow key={item.${11:id}}>",
      "                    <TableCell className=\"font-medium\">{item.${12:name}}</TableCell>",
      "                    <TableCell>{item.${13:type}}</TableCell>",
      "                    <TableCell>",
      "                      <Badge variant=\"outline\">{item.${14:status}}</Badge>",
      "                    </TableCell>",
      "                    <TableCell>",
      "                      <div className=\"flex items-center gap-2\">",
      "                        <Button variant=\"ghost\" size=\"sm\">",
      "                          <Eye className=\"w-4 h-4\" />",
      "                        </Button>",
      "                        <Button variant=\"ghost\" size=\"sm\">",
      "                          <Edit className=\"w-4 h-4\" />",
      "                        </Button>",
      "                      </div>",
      "                    </TableCell>",
      "                  </TableRow>",
      "                ))}",
      "              </TableBody>",
      "            </Table>",
      "          </div>",
      "        </CardContent>",
      "      </Card>",
      "    </div>",
      "  );",
      "}"
    ]
  },
  "Zod Schema": {
    "prefix": "artisan-schema",
    "description": "Zod validation schema with TypeScript export",
    "body": [
      "export const ${1:itemSchema} = z.object({",
      "  ${2:name}: z.string().min(1, \"${3:Name} is required\"),",
      "  ${4:type}: z.enum([${5:'option1', 'option2'}]),",
      "  ${6:quantity}: z.number().min(0, \"${7:Quantity} must be 0 or greater\"),",
      "  ${8:notes}: z.string().max(500, \"Notes must be less than 500 characters\").optional(),",
      "});",
      "",
      "export type ${9:ItemFormData} = z.infer<typeof ${1:itemSchema}>;"
    ]
  },
  "API Route Handler": {
    "prefix": "artisan-api",
    "description": "Next.js API route with error handling",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "import { ${1:schema} } from '@/lib/validations';",
      "",
      "export async function GET(request: NextRequest) {",
      "  try {",
      "    // TODO: Implement GET logic",
      "    const data = [];",
      "    return NextResponse.json(data);",
      "  } catch (error) {",
      "    console.error('GET /${2:endpoint} error:', error);",
      "    return NextResponse.json(",
      "      { error: 'Internal server error' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}",
      "",
      "export async function POST(request: NextRequest) {",
      "  try {",
      "    const body = await request.json();",
      "    const validatedData = ${1:schema}.parse(body);",
      "",
      "    // TODO: Implement POST logic",
      "    const result = validatedData;",
      "",
      "    return NextResponse.json(result, { status: 201 });",
      "  } catch (error) {",
      "    console.error('POST /${2:endpoint} error:', error);",
      "    ",
      "    if (error instanceof z.ZodError) {",
      "      return NextResponse.json(",
      "        { error: 'Validation failed', details: error.errors },",
      "        { status: 400 }",
      "      );",
      "    }",
      "",
      "    return NextResponse.json(",
      "      { error: 'Internal server error' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}"
    ]
  }
}
